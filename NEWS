*** libsigc++ 2.0 (unstable):

libsigc++ implements a typesafe callback system for standard C++. It
allows you to define signals and to connect those signals to any
callback function, either global or a member function, regardless of
whether it is static or virtual.

libsigc++ is used by gtkmm to wrap the GTK+ signal system. It does not depend 
on GTK or gtkmm.

libsigc++ 2.0 uses modern C++ mechanisms to achieve a highly flexible,
yet typesafe callback system. It supports all features of libsigc++ 1.2
and improves upon it with a simpler and more powerful API.

This version of libsigc++ needs GNU g++ 3.2 or higher to compile.


*** ChangeLog summary:

1.9.8:

* Add compatibility module that defines namespace SigC.
  namespace SigC should be API compatible to libsigc++-1.2.
  Currenctly only the core parts of the library are supported.
  Adaptors are still to follow.
* Fix connection::operator=(). Include connection.h in sigc++.h.
* Get rid of namespace functor.
* Rename dependency to destroy_notify_callback.
* Rename trackable::clear() to trackable::notify_callbacks().
* Move slot_base, signal_base, slot_iterator[_buf], slot_list
  out of namespace internal. They are public API.
* Add reference counter to signal_impl enabling signals
  to share the underlying information.
* Add convenience function signal#::make_slot().
* Get rid of one-letter-parameter-names.
* Get rid of "using namespace ..." in the test cases.
* Add lambda operators subscript ([]) and assign (=).
* Fix is_base_and_derived<> for const types.
* New and updated documentation.
* Add previous announces to file NEWS.

1.9.7:

* Added sigc++/sigc++.h. (Murray Cumming)
* Added member_method example. (Murray Cumming)
* Renamed closure to slot.
* Fixed issues with gcc-3.3. (Adreas Rottmann)
* Removed unnecessary void specializations.
* Made adaptors' operator()() (overload with no arguments) return a value.
* Made visit_each() support adaptors.
* Overhauled return type deduction to make it work without typeof().
* Added convinience macros SIGC_FUNCTORS_HAVE_RESULT_TYPE and 
SIGC_FUNCTOR_TRAIT(T_functor, T_result) to make return type deduction system 
support 3rd-party funtors.
* Changed syntax of group adaptor from "[functor] % grp([lambdas])" to "group
([functor], [lambdas])".
* Made many fixes to lambda functionality.
* Added var() and constant() lambda creators.
* Added many lambda operators.
* Added ref() which creates a reference wrapper to enable storage of 
references in bind and group adaptors.
* Expanded test suite.
* Added documentation. (Corrections by Murray Cumming)

1.9.6:

* First public release of the unstable 2.0 generation.
  libsigc++ 2.0 uses modern C++ mechanisms to achieve a highly
  flexible, yet typesafe callback system. It supports all features of
  libsigc++ 1.2 and improves upon it by:
  - No need to specify the number of arguments in signal definitions.
  - Connection of any compatible (=implicitly convertable) functor
   to a signal.
  - Implicit type conversions of parameters during signal emission.
  - Lambda adaptor for complete restructuring of functor parameter
   lists in one line (subject to changes).
  - Signal has a fully featured stl style list interface.
  - A convinient accumulator API (replacing the old marshaller API).
  - Removal of unnecessary memory management functionality.
  - Lightweight class "trackable" for use as base class of your
   class hierarchy replaces class "Object".
