Naming issues:

- Rename closure to slot.

- Shall we move everything from namespace sigc::functor to namespace sigc?
  (Discussion already started on the list - 26.03.2003).

- Move callof to namespace sigc::internal. Rename it to something sensible.

- Release 1.9.7 after sorting this out.


Compiler checks:

- Most probably needed:
  Configure check for typeof(). Only use typeof() if it's supported.
  This can be achieved via unsing macros CALLOF#() instead of callof<>
  that are defined to "result_type" if typeof() is not supported.

- Find out whether this is a gcc bug and whether it is already reported:

  int& foo();
  =>  typeof(foo()) == int instead of int& (gcc-3.2)

  Maybe find a workaround for this for the return type deduction of the
  lambda operators. It really hurts there because a lambda library should
  support e.g.: (lambda<std::ostream&>(std::cout) << _1)("hello world");

- Maybe move lambda stuff to libsigc++-extra if it can't be modified to
  work without typeof().

- Add return codes to "make check" so that the user doesn't need to 
  analyze the code to see what the heck it is supposed to do to ensure
  it passed. (Karl Nelson)

- Find out what compiler features apart from typeof() can be made optional.
  Add configure checks.


sigc++-1.2 compatibility:

- Add compatibility function make_slot() that works like sigc++-1.2's slot().


documentation:

- Add doxygen framework.

- Add more documentation. Recent ml threads should give hints:
  "callof", "call for names" (26.03.2003)


basic functionality:

- Find an alternative for SIGC_FUNCTORS_HAVE_RESULT_TYPE or remove it.

- Check what mem_functor variants are needed. ([bound_][volatile_][const_])

- I don't understand what is meant by "stl pointer like functions" (Martin):

  Closure should have the full set of stl pointer like functions. (Karl Nelson)


lambda functionality:

- Add support for _R to force references down into 
  the stack frame of lambda.  Ie.

  A a;
  (_1+_2)(1,a);  // fail if no "operator int() const"

- Support for ++, -- etc in lambda.

- I don't understand this (Martin):

  Call groups in lambda.  (Huh, that appears to be in group?)


Old TODO's that should be almost finished (Martin):

- Fine tooth comb the code looking for missing operator =() function
  and missing copy constructors.

- Improve and expand the test suite.  There are a lot of combinations which
  should be valid but haven't been tested which are likely to result in
  wierd compiler errors if something wasn't done consistantly.  

- Done, but the test suite doesn't check this (Martin):

  Verify visit_trait is set up for lambda and propogates to allow 
  disconnection through a closure.


Old TODO's that should be finished (Martin):

- Improve signal#, it currently is just barely functional.
- Add iterator support and stl like functionality to signal.

- Add blocking capablity to closure.

- Deinline/move to .cc where possible to move functions into the
  library to reduce resulting binary size.
