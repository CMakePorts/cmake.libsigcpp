2003-10-20  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/adaptors/compose.h.m4:
	Correct order of typedefs for good. (Patch from Jeff Franks.)

1.9.9:

2003-10-20  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/connection.h: Add constructor that takes
	a sigc::slot_base& to support 3rd-party slot lists
	like they are used in glibmm/gtkmm.
	* sigc++/functors/slot.h.m4: Make sigc::slot::call_type public.
	(Fixes compile problems reported by Jeff Franks.)
	* sig++/type_traits.h: Don't use long long in
	sigc::is_base_and_derived.
	(Fixes compile problems reported by Jeff Franks.)
	* sigc++/adaptors/{bind,compose,hide,exception_catch}.h.m4:
	Correct order of typedefs. (Repoted by Jeff Franks.)
	* configure.ac: Bump version number to 1.9.9.
	* NEWS: Add ChangeLog summary for version 1.9.9.

1.9.8:

2003-10-19  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/functors/slot.h.m4: Define doxygen group functors.
	* configure.ac: Bump version number to 1.9.8.
	* NEWS: Add ChangeLog summary for version 1.9.8.

2003-10-19  Martin Schulze  <teebaum@cvs.gnome.org>

	* NEWS: Add announces of versions 1.9.6 and 1.9.7.
	* sigc++/compatibility.h.m4: New file. Defines namespace SigC.
	namespace SigC should be API compatible to libsigc++-1.2.
	* sigc++/Makefile.am: Build compatibility.h.
	* tests/test_compatibility.cc, tests/Makefile.am:
	Add test case for compatibility module.
	* docs/index.html: Change group names.
	* sigc++/sigc++.h: Include connection.h.
	* sigc++/connection.{cc,h}:
	- Rename dependency to destroy_notify_callback.
	- Change parameter name in set_slot() from d to data.
	- Fix operator=(): Add "return *this;"
	- Get rid of namespace functor.
	- Corrections in documentation.
	* sigc++/signal.{cc,h.m4}:
	- Add reference counter to signal_impl. Replaces "bool destroy_".
	- Move signal_base, slot_iterator[_buf], slot_list out of
	namespace internal. They are part of the public API.
	- Add convenience function signal#::make_slot().
	- Get rid of namespace functor.
	- Corrections in documentation.
	* sigc++/trackable.{cc,h}:
	- Rename dependency to destroy_notify_callback.
	- Rename trackable::clear() to trackable::notify_callbacks().
	- Corrections in documentation.
	* sigc++/type_traits.h: Add documentation.
	* sigc++/visit_each.h:
	- Get rid of namespace functor.
	- Add documentation.
	* sigc++/adaptors[/lambda]/*: Get rid of namespace functor.
	* sigc++/functors/{functor_trait.h,ptr_fun.h.m4,mem_fun.h.m4}:
	- Get rid of namespace functor.
	- Corrections in documentation / add documentation.
	* sigc++/functors/slot.{cc,h.m4}:
	- Move slot_base out of namespace internal. It's public API.
	- Get rid of one-letter-parameter-names.
	- Get rid of namespace functor.
	- Corrections in documentation.
	* tests/*.cc: Get rid of "using namespace ...".

2003-09-10  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/adaptors/lambda/{base,operators}.h.m4:
	Add subscript ([]) and assign (=) operator. I think there are now
	enough operators available to make any future power user happy.
	The only one missing is the comma operator and if we added it
	the logical consequence would be to also add if(), switch(), do(),
	etc. lambda expressions which are really out of place in libsigc++.
	* sigc++/type_traits.h: Fix is_base_and_derived<> for const types.
	* tests/test_lambda.cc: Test new operators.

1.9.7:

2003-09-05  Martin Schulze  <teebaum@cvs.gnome.org>

	* configure.ac: Bump version number to 1.9.7.

2003-09-03  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/adaptors/lambda/operator.h.m4:
	- Restructure so that the size of the generated source file stays
	reasonable for 34 operators: There are only two lambda templates
	lambda_operator and lambda_operator_unary. The action is an additional
	template parameter. A small template lambda_action[_unary] is specialized
	for all actions.
	- Add most operators that boost::lambda supports. Missing operators are
	"=", "[]", "," and support for pointer arithmetic. I don't know if it's
	worth adding these. In libsigc++, the purpose of lambda operators is to
	provide some extra functionality for the group adaptor.
	* tests/test_lambda.cc:
	Test pre-increment, address and dereference operator.

2003-08-31  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/reference_wrapper.h, sigc++/type_traits.h, sigc++/Makefile.am:
	New file reference_wrapper.h provides ref() to specify that adaptors/lambdas
	should take a reference to the object passed into ref() instead of a copy.
	* tests/test_lambda.cc:
	- Test group() with mem_fun().
	- Use ref() where lambdas should store references to objects.
	- Test var() and constant().
	* sigc++/adaptors/lambda/base.h.m4:
	- Support ref() in return type deduction.
	- Add var() and constant() which create lambdas for usage with lambda operators.
	* sigc++/adaptors/lambda/operator.h.m4:
	- Fix return type deduction.
	- Remove operator{+,-,*,...} overloads added on 2003-08-29. ref() is way cleaner.
	* sigc++/adaptors/lambda/group.h.m4,
	sigc++/adaptors/bind.h.m4, sigc++/adaptors/compose.h.m4,
	sigc++/adaptors/exception_catch.h.m4, sigc++/adaptors/hide.h.m4:
	Fix return type deduction.

2003-08-29  Martin Schulze  <teebaum@cvs.gnome.org>

	* tests/test_lambda.cc: Add more tests.
	* sigc++/adaptors/lambda/select.h.m4, sigc++/adaptors/lambda/lambda.cc.m4:
	Make _1, _2, ... constant.
	* sigc++/adaptors/lambda/operator.h.m4:
	Add operator{+,-,*,...} overloads to distinguish between const and non-const objects.
	Store references to non-const objects rather than copies.
	This allows expressions like e.g. std::cout << _1.
	* sigc++/adaptors/lambda/base.h.m4, sigc++/adaptors/lambda/group.h.m4:
	Remove void specializations. Functors returning void are tested and work fine.

2003-08-27  Martin Schulze  <teebaum@cvs.gnome.org>

	* tests/test_callof.cc, tests/test_deduce_result_type.cc:
	Rename, correct and improve this test case.
	* tests/Makefile.am: Build and run test_deduce_result_type
	instead of test_callof.

2003-08-27  Martin Schulze  <teebaum@cvs.gnome.org>

	* Update TODO.

2003-08-27  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/adaptors/hide.h.m4: Remove usage of callof_ignore_arg<>.
	* sigc++/callof.h.m4, sigc++/adaptors/deduce_result_type.h.m4,
	sigc++/functors/functor_trait.h.m4:
	Remove the first and move deduce_result_type templates from
	functor_trait.h.m4 into new file deduce_result_type.h.m4.
	* sigc++/Makefile.am, sigc++/sigc++.h, sigc++/adaptors/adaptor_trait.h.m4:
	Build and include sigc++/adaptors/deduce_result_type.h instead of callof.h.
	* sigc++/functors/slot.h.m4: Document struct nil.

2003-08-24  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/functors/functor_trait.h.m4: Simplify usage of convenience
	macro SIGC_FUNCTORS_HAVE_RESULT_TYPE:
	namespace sigc{ namespace functor{ SIGC_FUNCTORS_HAVE_RESULT_TYPE }}

2003-08-24  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/functors/functor_trait.h,m4, sigc++/adaptors[/lambda]/*.h.m4:
	Merge adaptor return type deduction and typeof() into
	sigc::functor::deduce_result_type. Use it for all adaptors.
	* tests/test_compose.cc: Only test multi-type get-functor if
	typeof() if supported.

2003-08-24  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/adaptors[/lambda]/*.h.m4:
	- Remove unnecessary void specializations. In fact, only the one
	for sigc::functor::exception_catch<> is needed and I don't really
	understand why. For the lambda stuff the void specializatoins are
	just commented out at the moment.
	- Make typeof() optional. Surprisingly, I got the lambda stuff working
	without typeof()! The test suite doesn't catch all cases yet, so maybe
	some thing are still not working.
	TODO: Implement configure check.
	* tests/test_bind.cc, tests/test_compose.cc tests/test_exception_catch.cc,
	tests/test_hide.cc, tests/test_lambda.cc:
	Only test multiple functor return types if typeof() is supported.

2003-08-06  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/trackable.{cc,h}: Add function trackable::clear().

2003-06-24  Andreas Rottmann  <rottmann@users.sourceforge.net>

	* TODO: Minor tweaks.

2003-06-23  Andreas Rottmann  <rottmann@users.sourceforge.net>

	* docs/reference/Doxyfile.in: Use these variables.
	* docs/reference/Makefile.am (html/index.html): Provide doxygen 
	with SRCDIR and TOP_SRCDIR environment variables.
	
	* sigc++/functors/slot.h.m4: Make slot::call_type typedef public;
	this fixes a g++ 3.3 error in signal.h.

	* sigc++/signal.h.m4: Make the signal::accumulated class public;
	this fixes a g++ 3.3 error in test_accumulated.cc.

2003-06-15  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/functor/slot.h.m4: Correct typing error in docs.
	* sigc++/functor/ptr_fun.h.m4: Document the whole thing.

2003-05-31  Murray Cumming  <murrayc@usa.net>

	* Reference documentation: Rearranged the groups to make it all
	a bit more like the libsigc++ 1.2 reference documentation.
	Corrected some spelling and grammar too.
	This needs a lot of work. The text is very hard to read and it's
	generally not appropriate for a user of the code who doesn't
	care about the internals. But it's not impossible - our examples
	should show us what we need to say in the documentation.
	We probably need some more groups for the extra stuff, like we do
	in libsigc++ 1.2.

2003-05-29  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/signal.h.m4: Fix documentation.
	* sigc++/connection.h, sigc++/functor/slot.h.m4:
	Document the whole thing.

2003-05-29  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/signal.h.m4:
	- Remove bogus operator() from unnumbered signal<> and
	  signal<>::accumulated templates.
	- Document the whole thing.

	* docs/index.html: Fix some links.

2003-04-06  Martin Schulze  <MHL.Schulze@t-online.de>

	* TODO, configure.ac, Makefile.am, docs/*:
	Add Doxygen framework.

2003-04-06  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/callof.h.m4, sigc++/adaptors/*, tests/test_callof.cc:
	Move sigc::callof<> to sigc::functor::internal::callof<>.

	* sigc++/functors/mem_fun.h.m4, tests/test_mem_fun.cc:
	Add new types [bound_][const_]volatile_mem_functor, visit_each()
	and mem_fun() overloads for volatile qualifier.
	Add ctor overloads in bound_*mem_functor and mem_fun() overloads
	that take reference instead of pointer.

2003-03-26  Martin Schulze  <MHL.Schulze@t-online.de>

	* Change "closure" to "slot" throughout sigc++2 (file names,
	class names, member variables, documentation, etc.).

2003-03-26  Martin Schulze  <MHL.Schulze@t-online.de>

	* TODO: Rewrite to reflect recent changes as well as recent discussions.

2003-03-24  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/adaptors/bind_return.h.m4: Make the adaptor's data member
	public so that visit_each() can access it.

	* sigc++/adaptors/lambda/*.h.m4: More fixes. Add a note about
	malfunctioning typeof() (probably compiler bug in gcc-3.2).

	* tests/*.cc: Test references. Fix compose equivalent in test_lambda.

2003-03-24  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/Makefile.am, sigc++/functors/functor_trait.h[.m4],
	sigc++/adaptors/adaptor_trait.h.m4: Move detection of function
	and member method pointers' return types from adaptor_trait into
	functor_trait. (We'll use functor_trait rather than adaptor_trait for
	our lambda stuff.) functor_trait.h needs to be generated from .m4 now.

	* sigc++/functors/functor_trait.h.m4: Add convenience macros:
	- SIGC_FUNCTORS_HAVE_RESULT_TYPE indicates that the existance of
	T_functor::result_type should be assumed for all unknown functors.
	- SIGC_FUNCTOR_TRAIT(T_functor, T_result) explicitly specifies the
	result type of a functor.
	("typename functor_trait<T_functor>::result_type") is used to
	determine the return type of our adaptors' operator()() overloads.

	* sigc++/adaptors/[lambda/]*.h.m4: Various fixes in visit_each() and
	operator()() overloads to make these operator()() overloads usable.
	Most of them were just commented out before. Some adaptor types also
	have void specializations, now.

	* sigc++/adaptors/lambda/group.h.m4: Change syntax from
	"[some_functor] % grp([args])" to "group([some_functor], [args])"
	like we agreed on the ml some time ago.

	* sigc++/tests/test_[all adaptors].cc: Test stuff that didn't work
	before.

2003-03-22  Murray Cumming  <murrayc@usa.net>

	* Added pgk-config file, from a mystery person in bug #108857

2003-03-22  Martin Schulze  <MHL.Schulze@t-online.de>

	* tests/test_bind.cc: Test and show how to use functor_trait
	for user defined or 3rd-party functors so that a
	bind<0>([functor],[arg1])() call with no arguments can return a value.

2003-03-20  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/callof.h.m4: Add explanations. Comment in / create templates
	callof_safe[#]. Unfortunately they don't work for functors with overloaded
	operator() so we don't use it for now. At least everything is documented.

	* sigc++/functors/functor_trait.h, sigc++/functors/*.h.m4: Add back
	functor_base compiler hint. We're using it now in adaptor_functor<>.

	* sigc++/adaptors/{adaptor_trait,bind}.h.m4: Make operator() overloads
	with no arguments return the result of the functor invocation.
	Fix multiple bind<0>().
	* tests/test_bind.cc: Test the stuff that's working now.

2003-03-16  Murray Cumming  <murrayc@usa.net>

	* Added sigc++/sigc++.h, like in libsigc++ 1.2
	* examples: Added member_method example, which uses a class method
	and which demonstrates disconnection.

1.9.6:

2003-03-11  Andreas Rottmann  <rottmann@users.sourceforge.net>

	* sigc++/Makefile.am: Use substitution references instead of
	$(patsubst). Is shorter and fixes the strange-dirs-in-dist-tarball
	bug.

2003-03-09  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/connection.h: Add block() capability.

2003-03-09  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/signal.{cc,h.m4}: Add flag signal_impl::destroy_
	and function signal_impl::destroy(). Use them to defer
	the destruction of the signal_impl object during signal
	emission.

	* tests/test_disconnect.cc: Add tests for the connection
	class and for deleting signals during emission.

2003-03-09  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/connection.{cc,h}, sigc++/Makefile.am:
	- New files that add a connection class. Objects of this
	  class are constructed from closure list iterators and can
	  be used to disconnect the refered closure. As opposed to
	  iterators they stay valid beyond the lifetime of the closure.

2003-03-09  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/functors/closure.{cc,h.m4}, sigc++/signal.cc:
	- Rename closure_{base,rep}::[set_]dependency_ -> [set_]parent_.
	- Make closure_rep inherit trackable. This allows for
	  connection objects that stay valid beyond the life time
	  of the refered closure.
	- Make some one-line-functions inline again.

2003-03-08  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/trackable.cc: BUGFIX in trackable_dep_list::clear()

2003-03-08  Andreas Rottmann  <rottmann@users.sourceforge.net>

	* sigc++/Makefile.am: Rewritten so we can build lambda cleanly.
	* sigc++/Makefile.am_fragment: Removed.

	* sigc++/functors/Makfile.am: Removed.
	* sigc++/adaptors/Makefile.am: Removed.
	* sigc++/adaptors/lambda/Makefile.am: Removed.
	* configure.ac (AC_OUTPUT): Remove the above Makefiles.

	* tests/Makefile.am: Re-included lambda test.
	
2003-03-07  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/signal.{cc,h.m4}:
	- signal_emit#<>: New templates replacing signal#<>::caller.
	  The purpose of these templates is implementing the emit
	  function and optimizing signal emission for the case that
	  no accumulator is used via template specializations.
	- default_accumulator<>: Removed. The default for T_accumulator
	  in signal#<> now is nil. An example how to use accumulators
	  is available in tests/test_accumulator.cc.
	- signal_{base,impl}: Move the implementation of signal_base's
	  interface to signal_impl. An object of this class is
	  dynamically allocated when first connecting a closure to
	  the signal. This drastically reduces the size of empty signals
	  and allows for future addition of a reference counter to make
	  it safe to delete a signal during emission.
	- Directly work on closure_rep during signal emission. This
	  seems to be quicker than using the closure templates.
	- Document the classes. Restructure the header file a bit.

	* sigc++/functors/closure.h.m4: Make closure_base::rep_ data
	member public, so that signal emission can directly work on it.

	* tests/test_size.cc: Add an entry for signal_impl.

2003-03-07  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/functors/closure.{cc,h.m4}:
	- closure_base: BUGFIXES in ~closure_base() and operator=().
	- Mark some functions with the inline keyword. This seems to
          help gcc 3.2 to optimize signal emission and (dis)connection.
	- Document the classes. Restructure the header file a bit.

2003-03-07  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/trackable.{cc,h}: Make trackable allocate a
	trackable_dep_list object dynamically when adding the first
	dependency. (This reduces the size of objects, that are not
	refered by a closure by 4 bytes (50%) and increases the size
	of objects that are refered by a closure by 4 bytes (50%)
	on a 32 bit architecture => This reduces total memory use
	when >50% of the trackables are not refered by a closure.)
	Document the classes.

2003-03-05  Martin Schulze  <MHL.Schulze@t-online.de>

	* tests/Makefile.am, tests/test_size.cc, tests/test_accumulated.cc:
	Add two test cases. test_size is showing the size of  public and
	internal structures. (Which apart from empty signals are smaller
	than the sizes of the equivalent libsigc++-1.2 structures.)
	test_accumulated is a test for the template signal<>::accumulated<>
	at the same time showing the use of accumulators in libsigc++2.

	* Offtopic: My note about binary sizes from 2003-02-10 is wrong.
	Stripped libsigc++2 test binaries are about 8-10k in size.

2003-03-05  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/visit_each.h: BUGFIX in template specialization
	limit_derive_target<T_Target*,T_action>::with_type<false,T_type>:
	Add non-const overloads for static void execute_() avoiding
	compile time errors.

2003-02-16  Martin Schulze  <MHL.Schulze@t-online.de>

	* tests/Makefile.am, tests/test_disconnect.cc:
	Add testcase with a mixed connection & disconnection sequence.

2003-02-16  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/signal.cc: Bugfix in signal_base::insert():
	Set notification function in the newly created copy of
	slot_ rather than in slot_ itself.

2003-02-10  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/signal.h.m4: Comment in typedefs for iterator types in
	the signal#<> class template. Make signal#<>::connect() return an
	iterator for convenience.
	(Note that the first change increases the binary size of
	tests/test_signal from 201k to 204k, the second change to 206k.)

2003-01-23  Murray Cumming  <murrayc@usa.net>

	* sigc++/adaptors/lambda is disable temporarily (not built and
	not distributed) because it gets built before its parent
	directory, but #includes generated sources in the parent directory.

2003-01-22  Murray Cumming  <murrayc@usa.net>

	* Added Andreas Rottman's example.

2003-01-22  Murray Cumming  <murrayc@usa.net>

	* Applied Andreas Rottman's make dist fixes.

2003-01-14  Murray Cumming  <murrayc@usa.net>

	* Added whitespace to make the code more readable.

