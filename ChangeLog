1.9.6:

2003-03-11  Andreas Rottmann  <rottmann@users.sourceforge.net>

	* sigc++/Makefile.am: Use substitution references instead of
	$(patsubst). Is shorter and fixes the strange-dirs-in-dist-tarball
	bug.

2003-03-09  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/connection.h: Add block() capability.

2003-03-09  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/signal.{cc,h.m4}: Add flag signal_impl::destroy_
	and function signal_impl::destroy(). Use them to defer
	the destruction of the signal_impl object during signal
	emission.

	* tests/test_disconnect.cc: Add tests for the connection
	class and for deleting signals during emission.

2003-03-09  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/connection.{cc,h}, sigc++/Makefile.am:
	- New files that add a connection class. Objects of this
	  class are constructed from closure list iterators and can
	  be used to disconnect the refered closure. As opposed to
	  iterators they stay valid beyond the lifetime of the closure.

2003-03-09  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/functors/closure.{cc,h.m4}, sigc++/signal.cc:
	- Rename closure_{base,rep}::[set_]dependency_ -> [set_]parent_.
	- Make closure_rep inherit trackable. This allows for
	  connection objects that stay valid beyond the life time
	  of the refered closure.
	- Make some one-line-functions inline again.

2003-03-08  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/trackable.cc: BUGFIX in trackable_dep_list::clear()

2003-03-08  Andreas Rottmann  <rottmann@users.sourceforge.net>

	* sigc++/Makefile.am: Rewritten so we can build lambda cleanly.
	* sigc++/Makefile.am_fragment: Removed.

	* sigc++/functors/Makfile.am: Removed.
	* sigc++/adaptors/Makefile.am: Removed.
	* sigc++/adaptors/lambda/Makefile.am: Removed.
	* configure.ac (AC_OUTPUT): Remove the above Makefiles.

	* tests/Makefile.am: Re-included lambda test.
	
2003-03-07  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/signal.{cc,h.m4}:
	- signal_emit#<>: New templates replacing signal#<>::caller.
	  The purpose of these templates is implementing the emit
	  function and optimizing signal emission for the case that
	  no accumulator is used via template specializations.
	- default_accumulator<>: Removed. The default for T_accumulator
	  in signal#<> now is nil. An example how to use accumulators
	  is available in tests/test_accumulator.cc.
	- signal_{base,impl}: Move the implementation of signal_base's
	  interface to signal_impl. An object of this class is
	  dynamically allocated when first connecting a closure to
	  the signal. This drastically reduces the size of empty signals
	  and allows for future addition of a reference counter to make
	  it safe to delete a signal during emission.
	- Directly work on closure_rep during signal emission. This
	  seems to be quicker than using the closure templates.
	- Document the classes. Restructure the header file a bit.

	* sigc++/functors/closure.h.m4: Make closure_base::rep_ data
	member public, so that signal emission can directly work on it.

	* tests/test_size.cc: Add an entry for signal_impl.

2003-03-07  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/functors/closure.{cc,h.m4}:
	- closure_base: BUGFIXES in ~closure_base() and operator=().
	- Mark some functions with the inline keyword. This seems to
          help gcc 3.2 to optimize signal emission and (dis)connection.
	- Document the classes. Restructure the header file a bit.

2003-03-07  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/trackable.{cc,h}: Make trackable allocate a
	trackable_dep_list object dynamically when adding the first
	dependency. (This reduces the size of objects, that are not
	refered by a closure by 4 bytes (50%) and increases the size
	of objects that are refered by a closure by 4 bytes (50%)
	on a 32 bit architecture => This reduces total memory use
	when >50% of the trackables are not refered by a closure.)
	Document the classes.

2003-03-05  Martin Schulze  <MHL.Schulze@t-online.de>

	* tests/Makefile.am, tests/test_size.cc, tests/test_accumulated.cc:
	Add two test cases. test_size is showing the size of  public and
	internal structures. (Which apart from empty signals are smaller
	than the sizes of the equivalent libsigc++-1.2 structures.)
	test_accumulated is a test for the template signal<>::accumulated<>
	at the same time showing the use of accumulators in libsigc++2.

	* Offtopic: My note about binary sizes from 2003-02-10 is wrong.
	Stripped libsigc++2 test binaries are about 8-10k in size.

2003-03-05  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/visit_each.h: BUGFIX in template specialization
	limit_derive_target<T_Target*,T_action>::with_type<false,T_type>:
	Add non-const overloads for static void execute_() avoiding
	compile time errors.

2003-02-16  Martin Schulze  <MHL.Schulze@t-online.de>

	* tests/Makefile.am, tests/test_disconnect.cc:
	Add testcase with a mixed connection & disconnection sequence.

2003-02-16  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/signal.cc: Bugfix in signal_base::insert():
	Set notification function in the newly created copy of
	slot_ rather than in slot_ itself.

2003-02-10  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/signal.h.m4: Comment in typedefs for iterator types in
	the signal#<> class template. Make signal#<>::connect() return an
	iterator for convenience.
	(Note that the first change increases the binary size of
	tests/test_signal from 201k to 204k, the second change to 206k.)

2003-01-23  Murray Cumming  <murrayc@usa.net>

	* sigc++/adaptors/lambda is disable temporarily (not built and
	not distributed) because it gets built before its parent
	directory, but #includes generated sources in the parent directory.

2003-01-22  Murray Cumming  <murrayc@usa.net>

	* Added Andreas Rottman's example.

2003-01-22  Murray Cumming  <murrayc@usa.net>

	* Applied Andreas Rottman's make dist fixes.

2003-01-14  Murray Cumming  <murrayc@usa.net>

	* Added whitespace to make the code more readable.

